<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游览器的本地存储</title>
      <link href="/2020/02/23/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/2020/02/23/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>cookie</strong></p><ol><li><p>用户端保存请求信息的机制</p></li><li><p>分号分隔的多个key-value字段</p></li><li><p>存储在本地的加密文件里</p></li><li><p>域名和路径的限制</p></li></ol><blockquote><p><strong>cookie中的一些字段</strong></p><blockquote><p>name：cookie名称</p><p>domian：cookie生效的域名</p><p>path：cookie生效的路径</p><p>expires：cookie过期时间</p><p>HttpOnly：用户不可更改</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游览器中查看cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie</span><br><span class="line"><span class="comment">//添加cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=Rosen;domain=happymmall.com;path=/index.html;'</span></span><br><span class="line"><span class="comment">//获取格林威治时间</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.toUTCString()</span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line"><span class="comment">//将cookie的expirse即cookie的时间改为过期即可</span></span><br></pre></td></tr></table></figure><p><strong>session</strong></p><ol><li><p>服务端保存请求信息的机制</p></li><li><p>sessionId填充存放在cookie中</p></li><li><p>会话由游览器控制，会话结束，session失效</p></li></ol><p><strong>localStorage</strong></p><ol><li><p>H5新特性</p></li><li><p>有域名限制，不存在作用域概念</p></li><li><p>只有key-value</p></li><li><p>没有过期时间</p></li><li><p>游览器关闭后不会消失</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加localStorage</span></span><br><span class="line"><span class="built_in">window</span>.loaclStorage.setItem(<span class="string">'name'</span>,<span class="string">'Rosen'</span>);</span><br><span class="line"><span class="comment">//查看localStorage</span></span><br><span class="line"><span class="built_in">window</span>.localStorage.getItem(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//删除localStorage</span></span><br><span class="line"><span class="built_in">window</span>.localStorage.remove(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//不能添加对象进去，如果添加对象，相当于执行该对象的toStirng()方法</span></span><br><span class="line"><span class="built_in">window</span>.loaclStorage.setItem(<span class="string">'name'</span>,&#123;<span class="attr">name</span>: <span class="string">'Rosen'</span>&#125;);</span><br><span class="line"><span class="comment">//结果为:"[object object]"</span></span><br><span class="line"><span class="comment">//如果需要添加对象，可以使用JSON格式的stringify方法将对象转换为字符串，如下：</span></span><br><span class="line"><span class="built_in">window</span>.loaclStorage.setItem(<span class="string">'name'</span>,<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">'Rosen'</span>&#125;));</span><br><span class="line"><span class="comment">//结果为:"&#123;"name":"Rosen"&#125;"</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>sessionStorage</strong></p><ol><li>和localStorage极其相似</li><li>游览器关闭后消失</li></ol>]]></content>
      
      
      <categories>
          
          <category> storage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础语法(2)</title>
      <link href="/2020/02/23/ES602/"/>
      <url>/2020/02/23/ES602/</url>
      
        <content type="html"><![CDATA[<ol><li><p>面向对象—类</p><blockquote><p>关键词：class</p></blockquote><blockquote><p>语法糖：对应function</p></blockquote><blockquote><p>构造函数：constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">&gt;         <span class="keyword">this</span>.name = name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     getName()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;  </span><br><span class="line">&gt; <span class="comment">//实例化一个类</span></span><br><span class="line">&gt; <span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">'animal name'</span>); <span class="comment">//初始化构造函数中的参数</span></span><br><span class="line">&gt; <span class="comment">//构造函数的用法</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(animal.getName)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>面向对象—类的继承</p><blockquote><p>extends：类的继承</p></blockquote><blockquote><p>super：调用父类的构造函数</p><p>this：谁调用指向的就是谁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">constructor</span>()&#123;</span><br><span class="line">&gt;         <span class="keyword">this</span>.name = <span class="string">'animal name'</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     getName()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">constructor</span>()&#123;</span><br><span class="line">&gt;         <span class="keyword">super</span>();</span><br><span class="line">&gt;         <span class="keyword">this</span>.name = <span class="string">'cat'</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">let</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">&gt; <span class="keyword">let</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line">&gt; <span class="built_in">console</span>.log(animal.getName())</span><br><span class="line">&gt; <span class="built_in">console</span>.log(cat.getName())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>面向对象—对象</p><blockquote><p>对象里属性的简写</p><p>对象里方法的简写</p><p>属性名可以作为表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//对象的用法</span></span><br><span class="line">&gt; <span class="keyword">var</span> name = <span class="string">'Hae'</span>,</span><br><span class="line">&gt;     age = <span class="number">18</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> obj=&#123;</span><br><span class="line">&gt;     name : name,</span><br><span class="line">&gt;     age : age,</span><br><span class="line">&gt;     getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     getAge : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">var</span> name = <span class="string">'Hae'</span>,</span><br><span class="line">&gt;     age = <span class="number">18</span>;</span><br><span class="line">&gt; <span class="comment">//将上面的对象进行简化</span></span><br><span class="line">&gt; <span class="keyword">let</span> obj = &#123;</span><br><span class="line">&gt;     <span class="comment">//变量名可以直接用作对象的属性名称</span></span><br><span class="line">&gt;     name,</span><br><span class="line">&gt;     age,</span><br><span class="line">&gt;     <span class="comment">//对象里的方法可以简写</span></span><br><span class="line">&gt;     getName()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&gt;     &#125;,</span><br><span class="line">&gt;     <span class="comment">//表达式作为属性名或者方法</span></span><br><span class="line">&gt;     [<span class="string">'get'</span> + <span class="string">'Age'</span>]()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><blockquote><p>其他拓展</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Object</span>.keys(obj)<span class="comment">//是一个数组(将对象中的属性和方法提取出来)</span></span><br><span class="line">&gt; <span class="comment">//其中的变量obj是上例中的对象obj</span></span><br><span class="line">&gt; <span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;,&#123;<span class="attr">b</span>: <span class="number">2</span>&#125;)<span class="comment">//合并两个对象</span></span><br><span class="line">&gt; <span class="comment">//结果是: &#123;a: 1,b: 2&#125; 如果数据重叠则会进行覆盖</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>ES6模块化</p><blockquote><p>解决一个复杂问题时候自顶向下逐层把系统划分为若干模块的过程 </p></blockquote><blockquote><p>关键词：export，import，as，default</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">&lt;!-- 同级目录下三个文件index.html即此代码，index.js,module.js --&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//module.js</span></span><br><span class="line">&gt; <span class="keyword">let</span> str = <span class="string">'string'</span>;</span><br><span class="line">&gt; <span class="keyword">let</span> obj = &#123;</span><br><span class="line">&gt;     name : <span class="string">'Rosen'</span></span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; <span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="string">'module test'</span>)</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">export</span> &#123;</span><br><span class="line">&gt;     str,</span><br><span class="line">&gt;     obj,</span><br><span class="line">&gt;     fn</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//这个模块输出的就是str,obj,fn</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line">&gt; <span class="comment">//模块默认的输出</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//index.js</span></span><br><span class="line">&gt; <span class="keyword">import</span> &#123;str <span class="keyword">as</span> string, obj, fn&#125; <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">//模块的引入</span></span><br><span class="line">&gt; <span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">//默认模块的引入foo变量名可以随便更改</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'name'</span>: obj.name);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'string'</span>: string);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'fn'</span>: fn);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础语法(1)</title>
      <link href="/2020/02/23/ES601/"/>
      <url>/2020/02/23/ES601/</url>
      
        <content type="html"><![CDATA[<ol><li><p>什么是[^ES6]?</p><blockquote><p>是ECMA Script, Javascript的语言标准</p></blockquote><blockquote><p>提升JS编写大型的复杂的应用程序的能力</p></blockquote><blockquote><p>Babel：ES6-&gt;ES5(一种将ES6转换为ES5的工具)</p></blockquote></li></ol><ol start="2"><li><p>let, const关键字</p><blockquote><p> let定义变量，const定义常量</p></blockquote><blockquote><p>不能重复定义</p></blockquote><blockquote><p>块级作用域</p></blockquote><blockquote><p>不存在变量提升</p></blockquote></li><li><p>箭头函数</p><blockquote><p>参数=&gt;表达式/语句</p></blockquote><blockquote><p>继承外层作用域</p></blockquote><blockquote><p>不能用作构造函数</p></blockquote><blockquote><p>没有prototype属性</p></blockquote></li><li><p>模板字符串</p><blockquote><p>反引号标识``</p></blockquote><blockquote><p>支持多行字符串</p></blockquote><blockquote><p>支持变量([^${变量}])和表达式</p></blockquote></li><li><p>Promise</p><blockquote><p>Promise对象是为了解决异步回调函数从头嵌套的问题</p></blockquote><blockquote><p>关键词：创建Promise时的参数resolve,reject以及表示结果的then</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">&gt;     $.ajax(&#123;</span><br><span class="line">&gt;         url : <span class="string">'http://happymall.com/user/get_cart_product.do'</span>,</span><br><span class="line">&gt;         type : <span class="string">'post'</span>,</span><br><span class="line">&gt;         success(res)&#123;</span><br><span class="line">&gt;             resolve(res);</span><br><span class="line">&gt;         &#125;,</span><br><span class="line">&gt;         error(err)&#123;</span><br><span class="line">&gt;             reject(err);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt; &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="string">'success:'</span>,res)</span><br><span class="line">&gt; &#125;,(err)=&gt;&#123;</span><br><span class="line">&gt;    <span class="built_in">console</span>.log(<span class="string">'error:'</span>,err) </span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react面试笔记</title>
      <link href="/2020/02/22/reactNo1/"/>
      <url>/2020/02/22/reactNo1/</url>
      
        <content type="html"><![CDATA[<ol><li>游览器里输入一个地址后都会发生些什么？</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps教程</title>
      <link href="/2020/02/22/ps/"/>
      <url>/2020/02/22/ps/</url>
      
        <content type="html"><![CDATA[<p> ps用处：修图，平面设计（logo、海报等），绘图，动图，表情包</p><ol><li>工具面板<br>文字T键入——放大镜（Alt切换）——抓手（移动画布）；Ctrl+0以最大呈现<br>新建工作区：导航器，画笔，字符</li><li>图层面板<br>混合模式：滤色（滤去深色）<br>文字立体感：可投影（图层样式）</li><li>图片裁剪<br>图像→画布大小【需要先解除锁定】：Ctrl+T【自动变换工具】选中图片，shift等比例缩放，Alt中心缩放</li><li>蒙版【图片合成】：不破坏原始素材进行修改<br>拖动→添加蒙版（细微修改：流量、不透明度）→画笔（黑透白不透）</li><li>校色<br>新建调整图层→曲线（调节明暗）、色彩平衡<br>【只影响下一张图片：创建剪切图层】</li><li>钢笔工具【抠图：不用选区和蒙版（蒙版抠图柔和不精确）】<br>好习惯：Ctrl+J复制图层→隐藏<br>曲线：按住左键←直线（Alt：转换点工具/一侧变换点击一端点）<br>Ctrl：改变锚点位置<br>增加锚点：点击两点之间<br>减少锚点：点击一点<br>系统新建形状→Ctrl+Z退回，惦记着最后一个点连接</li><li>修片：<br>①修复红眼：使用红眼修复工具（需选中整个眼睛）<br>②污渍修复工具：可小地方修修改→就近取色<br>③修复画笔工具：Alt+拾色（可任取色，且过渡更自然）<br>④仿制图章：Alt+拾色（任取色，过渡相对不是和和谐）<br>⑤修补工具→去水印</li><li>文字：选“平滑”消除锯齿，调整字体和间距<br>【制作光晕】：使用智能对象（智能对象：可无限期修改）<br>新建图层→填充前景黑色→滤镜/渲染/光线<br>混合模式：【滤色】<br>裁剪：【先修改比例等默认值】<br>画笔工具：【→缩小，】→放大（在英文非大写状态）<br>【分开调色】：建立组（必须勾选此组有效）<br>【剪影】：使用钢笔选中建立选区使用蒙板纯色填充之后→复制→在第一个图层添加图层样式“色彩叠加”→移动→→使用【渐变映射整体调整】  </li></ol>]]></content>
      
      
      <categories>
          
          <category> ps教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>happy test！</title>
      <link href="/2020/02/21/test/"/>
      <url>/2020/02/21/test/</url>
      
        <content type="html"><![CDATA[<p>我是测试内容!</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则四</title>
      <link href="/2019/10/11/Markdown4/"/>
      <url>/2019/10/11/Markdown4/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>表格</strong></p><p>制作表格使用[^|]来分隔不同的单元格，使用[^-]来分个表头和其他行</p><p>语法格式如下：</p><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table><hr><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a><strong>高级技巧</strong></h3><p><strong>支持的HTML元素</strong></p><p>不在Markdown涵盖范围之内的标签，都可以直接在文档中用HTML撰写</p><p>目前支持的元素有<kbd>  <b> <i>  <em> <sup>  &lt;br>等</sup></em></i></b></kbd></p><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑</p><p><strong>转义</strong></p><p>使用很多特殊的符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，markdown使用反斜杠转义特殊字符：</p><p>*<em>文本加粗*</em></p><p>\*\<em>正常显示星号\*\\</em></p><p><strong>公式</strong></p><p>当需要在编辑器中插入数学公式的时候，可以使用两个美元符号$$包裹TeX或者LateX格式的数学公式来实现。提交后，问答和文章页会根据需要加载Mathjax对数学公式进行渲染。如：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则三</title>
      <link href="/2019/10/11/Markdown3/"/>
      <url>/2019/10/11/Markdown3/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>链接</strong></p><p>链接的使用方式如下：</p><p>[链接名称](链接地址)</p><p>或者</p><p>&lt;链接地址&gt;</p><p>例如：</p><p>这是一个链接    <a href="https://www.baidu.com" target="_blank" rel="noopener">百度一下</a></p><p>或者直接使用链接地址</p><p><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p><p><strong><em>高级链接</em></strong></p><p>链接也可以使用变量来代替，文档末尾附带变量地址：</p><p><strong>注意</strong></p><p>此时的格式<strong>不再</strong>是[]()而是[][]</p><p>这个链接用1来作为网址变量[Google]<a href="http://www.google.com/" target="_blank" rel="noopener">1</a></p><p>这个链接使用run作为网址变量[baidu]<a href="http://www.baidu.com/" target="_blank" rel="noopener">run</a></p><p>然后在文档结尾处为变量赋值(网址)</p><p><strong>图片</strong></p><p>语法格式如下：</p><p> ![alt  属性文本](图片地址)</p><p> ![alt  属性文本](图片地址  “可选标题”)</p><ul><li>开头一个感叹号</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的‘title’属性的文字。</li></ul><p>使用实例：</p><p><img src="//www.baidu.com/img/bd_logo1.png" alt="Baidu 图标"></p><p><img src="//heaiwei.github.io/2019/10/11/Markdown3/ztfn.JPG" alt="斋藤飞鸟图标"></p><p>同理，也可以像使用链接网址一样对图片地址使用变量：</p><p>这个链接用1作为网址变量 <img src="//www.baidu.com/img/bd_logo1.png" alt="baidu">.</p><p>然后在文档的结尾位变量赋值(网址)</p><p>目前[^Markdow]还没有办法指定图片的高度与宽度，如果需要的话，可以使用普通的<strong><img></strong>标签。</p><img src="//www.baidu.com/img/bd_logo1.png" width="50%">]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则二</title>
      <link href="/2019/10/11/Markdown2/"/>
      <url>/2019/10/11/Markdown2/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>区块</strong></p><p>markdown区块引用是在段落的开头使用[^&gt;]符号,然后后面紧跟一个<strong>空格</strong>符号</p><blockquote><p>区块引用</p><p>菜鸟教程</p><p>学的是技术也是梦想！加油</p></blockquote><p>此外区块是可以嵌套的，一个[^&lt;]符号是最外层，两个[^&lt;]是第一层嵌套以此类推</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote><p><strong>区块中使用列表</strong></p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol></blockquote><blockquote><ul><li>第一项</li><li>第二项</li></ul></blockquote><p><strong>列表中使用区块</strong></p><p>在列表项目内放进区块，那么就需要在[^&gt;]前添加[^四个空格]的缩进</p><p>区块中使用列表的实例如下： </p><ul><li><p>第一项</p><blockquote><p>菜鸟教程</p><p>你好世界</p></blockquote></li><li><p>第二项</p><blockquote><p>第二项</p></blockquote></li></ul><p><strong>代码</strong></p><p>如果段落上的一个函数或者片段的代码可以用反引号把它包起来（[^`]）,例如：</p><p><code>printf()</code>函数</p><p><strong>代码区块</strong></p><p>代码区块使用<strong>4个空格</strong>或者一个<strong>制表符</strong>（Tab键)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helllo"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">emmmmm好像不起作用！！！(此处使用的是鼠标右键的插入代码块)<span class="string">`</span></span><br></pre></td></tr></table></figure><p>也可以使用[^<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    alert(&quot;HHH&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则一</title>
      <link href="/2019/10/11/Markdown1/"/>
      <url>/2019/10/11/Markdown1/</url>
      
        <content type="html"><![CDATA[<p>我展示的是一级标题 </p><p>==============</p><p>我展示的是二级标题</p><hr><p>#一级标题</p><p>##二级标题</p><p>###三级标题</p><p><em>斜体文本</em></p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><strong>粗体文本</strong></p><p><strong><em>粗斜体文本</em></strong></p><p><strong><em>粗斜体文本</em></strong></p><hr><hr><p><del>删除线</del></p><p><u>带下划线</u></p><p><strong>脚注</strong></p><p>[^要注明的文本]</p><p>创建脚注格式类似这样[^HAW]</p><p>你好[^我是何]</p><p><strong>有序列表和无序列表</strong></p><p>无序列表使用星号（*），加号（+）或者是减号（-）作为列表标记：</p><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><p>有序列表使用数字加上[^.]号来表示</p><ol><li>第一项</li><li>第二项</li></ol><p><strong>列表嵌套</strong>只需要在子列表中的选项添加[^四]个空格即可</p><ol><li>第一项<pre><code>- 第一项嵌套的第一个元素- 第一项嵌套的第二个元素</code></pre></li><li>第二项<pre><code>- 第二项的嵌套的第一个元素- 第二项的嵌套的第二个元素</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my second blog about hexo!</title>
      <link href="/2019/10/10/second-blog/"/>
      <url>/2019/10/10/second-blog/</url>
      
        <content type="html"><![CDATA[<p>nothing impotant</p><p>需要注意的命令：</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>hexo d</p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog about hexo!</title>
      <link href="/2019/10/10/first-blog/"/>
      <url>/2019/10/10/first-blog/</url>
      
        <content type="html"><![CDATA[<p>nothing impotant</p><p>需要注意的命令：</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>hexo d</p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

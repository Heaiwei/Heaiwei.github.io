<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue的安装与基础语法</title>
      <link href="/2020/03/14/Vue%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/14/Vue%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Vue的安装</p><blockquote><p>一. 使用Vue的开发版本进行安装</p><p>链接网址 ：<a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">https://cn.vuejs.org/js/vue.js</a></p><p>之后再在html文件中引入该文件即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>二. 使用Vue的脚手架即Vue-cli进行大型项目的项目开发</p><p>安装cnpm，提高打包速度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install cnpm -g</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>下载Vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cnpm install vue</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>全局安装vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cnpm install --global vue-cli</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>创建一个基于 webpack 模板的新项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; vue init webpack my-project</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这里需要进行一些配置，默认回车即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; //进入项目</span><br><span class="line">&gt; cd my-project</span><br><span class="line">&gt; //运行项目</span><br><span class="line">&gt; cnpm install</span><br><span class="line">&gt; cnpm run dev</span><br><span class="line">&gt; //然后通过本地端口就可以访问到Vue的界面了</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Vue的基础语法</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商后台管理系统知识汇总</title>
      <link href="/2020/03/01/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/2020/03/01/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在引入组件模块的时候，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入一个Home组件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./home/index.jsx'</span>;</span><br></pre></td></tr></table></figure><p>此时使用[^./]的形式会影响引入组件的灵活性，所以在webpack的配置文件中通过添加如下代码可以改善这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置项</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">    alias : &#123;</span><br><span class="line">      page : path.resolve (__dirname, <span class="string">'src/page'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>此时引入组件就可以写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入一个Home组件</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'src/home/index.jsx'</span>;</span><br></pre></td></tr></table></figure></li><li><p>当需要访问一个路径不匹配的资源时设置一个默认路径可以使用路由react-router中的Rediect,使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect <span class="keyword">from</span>=<span class="string">"*"</span> to=<span class="string">"/"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>当需要访问页面出现404的时候跳转到主页(或者指定页面)，可以在webpack的配置中加上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port:<span class="number">8086</span>,</span><br><span class="line">    historyApiFallback:&#123;</span><br><span class="line">      index: <span class="string">'/dist/index.html'</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>好用的react插件之<a href="mailto:rc-paginantion@1.15.1" target="_blank" rel="noopener">rc-paginantion@1.15.1</a>(千万别用最新的版本)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React框架基础指南(2)</title>
      <link href="/2020/02/28/React%E5%9F%BA%E7%A1%8002/"/>
      <url>/2020/02/28/React%E5%9F%BA%E7%A1%8002/</url>
      
        <content type="html"><![CDATA[<h2 id="深入了解React之组件的生命周期"><a href="#深入了解React之组件的生命周期" class="headerlink" title="深入了解React之组件的生命周期"></a>深入了解React之组件的生命周期</h2><ol><li><p>概念：生命周期就是一个组件从创建到销毁的过程</p></li><li><p>作用：提供某些节点需要触发的事件</p></li><li><p>生命周期节点：</p><ul><li><p>Mounting : 挂载阶段包含</p><blockquote><p>constructor()</p><p>componentWillMount()</p><p>componentDidMount()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">&gt; <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">&gt; <span class="keyword">super</span>(props)</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'constructor'</span>)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; componentWillMount()&#123;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; componentDidMount()&#123;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; render()&#123;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">&gt; <span class="keyword">return</span>(</span><br><span class="line">&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt; App</span></span><br><span class="line"><span class="xml">&gt; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&gt; );</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//输出结果为：</span></span><br><span class="line">&gt; <span class="comment">//constructor</span></span><br><span class="line">&gt; <span class="comment">//componentWillMount</span></span><br><span class="line">&gt; <span class="comment">//render</span></span><br><span class="line">&gt; <span class="comment">//componentDidMount</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Upading : 运行阶段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'初始化数据'</span>,<span class="string">'constructor'</span>)</span><br><span class="line"><span class="keyword">this</span>.state=&#123;</span><br><span class="line">data : <span class="string">'Old state'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">componentWillMount()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>)</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接受父组件传过来的props时候触发</span></span><br><span class="line">componentWillReceiveProps()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillReceiveProps'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子组件是不是应该更新</span></span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>);</span><br><span class="line"><span class="comment">//比较特殊的就是需要一个返回值，判断是否更新</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组件将要更新</span></span><br><span class="line">componentWillUpdate()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组件更新完成</span></span><br><span class="line">componentDidUpdate()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'componenetDidUpdate'</span>)</span><br><span class="line">&#125;</span><br><span class="line">handleClick()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"更新数据！"</span>)</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">data: <span class="string">'New state'</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;Props:&#123;<span class="keyword">this</span>.props.data&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;() =&gt;&#123;this.handleClick()&#125;&#125;&gt;更新组件&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props)</span></span><br><span class="line"><span class="regexp">this.state=&#123;</span></span><br><span class="line"><span class="regexp">data : 'Old props'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">console.log('初始化数据','constructor')</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">onPropsChange()&#123;</span></span><br><span class="line"><span class="regexp">console.log('更新props')</span></span><br><span class="line"><span class="regexp">this.setState(&#123;</span></span><br><span class="line"><span class="regexp">data : 'New props'</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">return(</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Component data=&#123;this.state.data&#125;/</span>&gt;</span><br><span class="line">    &lt;button onClick=&#123;() =&gt; &#123;<span class="keyword">this</span>.onPropsChange()&#125;&#125;&gt;改变Props&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点击按钮后的结果：</span></span><br><span class="line"><span class="comment">//初始化数据 constructor</span></span><br><span class="line"><span class="comment">//初始化数据 constructor</span></span><br><span class="line"><span class="comment">//componentWillMount</span></span><br><span class="line"><span class="comment">//render</span></span><br><span class="line"><span class="comment">//componentDidMount</span></span><br><span class="line"><span class="comment">//更新props</span></span><br><span class="line"><span class="comment">//componentWillReceiveProps</span></span><br><span class="line"><span class="comment">//shouldComponentUpdate</span></span><br><span class="line"><span class="comment">//componentWillUpdate</span></span><br><span class="line"><span class="comment">//render</span></span><br><span class="line"><span class="comment">//componenetDidUpdate</span></span><br></pre></td></tr></table></figure></li><li><p>Ummounting : 卸载阶段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在上面代码的子组件Conponent中添加代码：</span></span><br><span class="line"><span class="comment">//卸载子(本)组件</span></span><br><span class="line"><span class="comment">//组件将要销毁</span></span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillUnmount'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改上面代码的父组件App代码为：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line"><span class="keyword">this</span>.state=&#123;</span><br><span class="line">data : <span class="string">'Old props'</span>,</span><br><span class="line">hasChild: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'初始化数据'</span>,<span class="string">'constructor'</span>)</span><br><span class="line">&#125;</span><br><span class="line">onPropsChange()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'更新props'</span>)</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">data : <span class="string">'New props'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">onDestoryChild()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'卸载子组件'</span>)</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">hasChild: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.hasChild ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;/</span>&gt;</span> : null</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;this.onPropsChange()&#125;&#125;&gt;改变Props<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;this.onDestoryChild()&#125;&#125;&gt;卸载子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点击卸载按钮，结果：</span></span><br><span class="line"><span class="comment">//卸载子组件</span></span><br><span class="line"><span class="comment">//componentWillUnmount</span></span><br></pre></td></tr></table></figure></li><li><p>Error Handing : 错误处理（只处理render中的错误）</p></li></ul></li></ol><h2 id="Router原理以及React-Router"><a href="#Router原理以及React-Router" class="headerlink" title="Router原理以及React-Router"></a>Router原理以及React-Router</h2><h3 id="Router原理"><a href="#Router原理" class="headerlink" title="Router原理"></a>Router原理</h3><p>   Router指的是一种处理游览器中访问先后关系的机制，简单的说就是允许在不同页面中的跳转，然后记录跳转关系还能原路退回去的机制</p><p>   路由包含了三个主要部分：</p><ol><li><p>历史</p><blockquote><p>栈的数据结构，通过入栈和出栈记录访问页面的过程</p></blockquote></li><li><p>跳转</p><blockquote><p>负责路由在不同页面的跳转动作，并且可以传递参数</p></blockquote></li><li><p>事件</p><blockquote><p>打开新页面或者退回上一个页面时候触发的逻辑</p></blockquote></li></ol><p>   常见的Router:</p><ol><li><p>页面的Router</p><blockquote><p>最常用的Router,整页面的加载，回退也是整页面的加载</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href = &apos;http://www.baidu.com&apos;</span><br></pre></td></tr></table></figure></li><li><p>Hash Router</p><blockquote><p>跳转时只有路径的hash值在发生变化，页面并没有重新加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接在游览器的console中输入</span></span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'#test1'</span></span><br><span class="line"><span class="comment">//网址不会重新加载，只会在网址路径上添加#test1</span></span><br><span class="line"><span class="built_in">window</span>.onhashchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'current hash:'</span>,<span class="built_in">window</span>.location.hash)&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//ƒ ()&#123;console.log('current hash:',window.location.hash)&#125;</span></span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'#test2'</span></span><br><span class="line"><span class="comment">//"#test2"</span></span><br><span class="line"><span class="comment">//current hash: #test2</span></span><br><span class="line"><span class="comment">//点击回退</span></span><br><span class="line"><span class="comment">//current hash: #test1</span></span><br><span class="line"><span class="comment">//这样就可以通过拿到的hash进行逻辑判断</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>H5 Router</p><blockquote><p>类似Hash Router，但是能操控整个路径，既可以操作hash也可以操作路径，兼容性较差</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(<span class="string">'test'</span>,<span class="string">'Title'</span>,<span class="string">'#test'</span>)</span><br><span class="line"><span class="comment">//网址不会重新加载，只会在网址路径上添加#test</span></span><br><span class="line"></span><br><span class="line">history.pushState(<span class="string">'test'</span>,<span class="string">'Title'</span>,<span class="string">'/user/index'</span>)</span><br><span class="line"><span class="comment">//这里比Hash功能更加强大，可以引入一个地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onpopstate=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'H5 router change:'</span>,e.state)&#125;</span><br><span class="line"><span class="comment">//结果：ƒ (e)&#123;console.log('H5 router change:',e.state)&#125;</span></span><br><span class="line">history.pushState(<span class="string">'test'</span>,<span class="string">'Title'</span>,<span class="string">'/user/test'</span>)</span><br><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//点击回退</span></span><br><span class="line"><span class="comment">// H5 router change: test</span></span><br></pre></td></tr></table></figure></li></ol><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用的location值</span></span><br><span class="line"><span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>.location.pathname</span><br><span class="line"><span class="built_in">window</span>.location.hash</span><br><span class="line">windoe.location.search</span><br></pre></td></tr></table></figure></code></pre><h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h3><ul><li>React 官方提供的路由插件，单页应用必备</li><li>使用版本，<a href="mailto:react-router-dom@v4.2.2" target="_blank" rel="noopener">react-router-dom@v4.2.2</a></li><li>动态路由，纯react组件</li></ul><p>常用组件</p><ul><li><browserrouter>/<hashrouter>，路由方式</hashrouter></browserrouter></li><li><route>，路由规则</route></li><li><switch>，路由选项</switch></li><li><link>/<navlink>，跳转导航</navlink></li><li><redirect>，自动跳转</redirect></li></ul><p>代码用法：</p><ol><li><p>安装react-router-dom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom@4.2.2</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashRouter的使用</span></span><br><span class="line"><span class="keyword">import</span> &#123;HashRouter <span class="keyword">as</span> Router, Route, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;Component A&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class B extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;div&gt;Component B&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/a"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'yellow'</span>&#125;&#125;&gt;组件A&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br/</span>&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/b"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'yellow'</span>&#125;&#125;&gt;组件B&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">&#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Router&gt;</span><br><span class="line">     &lt;Wrapper&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/a"</span> component=&#123;A&#125;/&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/b"</span> component=&#123;B&#125;/&gt;</span><br><span class="line"> &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BrowserRouter的使用</span></span><br><span class="line"><span class="comment">//BrowserRouter请求的是后端地址，当复制本地地址到其他页面打开的时候会出现404界面</span></span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter <span class="keyword">as</span> Router, Route, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带参数的组件传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">Component A</span><br><span class="line">参数是：&#123;<span class="keyword">this</span>.props.match.params.id&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class B extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;div&gt;Component B&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/a"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'yellow'</span>&#125;&#125;&gt;组件A&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br/</span>&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/a/123"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'yellow'</span>&#125;&#125;&gt;带参数的组件A&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br/</span>&gt;</span><br><span class="line">    &lt;Link to=<span class="string">"/b"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'yellow'</span>&#125;&#125;&gt;组件B&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">&#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Router&gt;</span><br><span class="line">     &lt;Wrapper&gt;</span><br><span class="line">            &lt;!--注意path的写法--&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/a/:id"</span> component=&#123;A&#125;/&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/b"</span> component=&#123;B&#125;/&gt;</span><br><span class="line"> &lt;<span class="regexp">/Wrapper&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//怎么区分访问的是带参数的页面还是子页面？</span></span><br><span class="line"><span class="comment">//可以在子组件中建立一些Route然后用Switch标签进行包裹</span></span><br><span class="line"><span class="comment">//将匹配子页面的Route放在匹配擦书的Route上面即可解决</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">Component A</span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">&lt;Route exact path=&#123;<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.props.match.path&#125;</span>`</span>&#125; render=&#123;(route)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>不带参数的组件A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line">&lt;Route exact path=&#123;<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.props.match.path&#125;</span>/sub`</span>&#125; render=&#123;(route)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>当前页面是Sub<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line">&lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.props.match.path&#125;</span>/:id`</span>&#125; render=&#123;(route)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>带参数的组件A,参数是：&#123;route.match.params.id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;Component B&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Wrapper extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Link to="/</span>a<span class="string">" style=&#123;&#123;color:'yellow'&#125;&#125;&gt;组件A&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;br/&gt;</span></span><br><span class="line"><span class="string">    &lt;Link to="</span>/a/<span class="number">123</span><span class="string">" style=&#123;&#123;color:'yellow'&#125;&#125;&gt;带参数的组件A&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;br/&gt;</span></span><br><span class="line"><span class="string">    &lt;Link to="</span>/b<span class="string">" style=&#123;&#123;color:'yellow'&#125;&#125;&gt;组件B&lt;/Link&gt;</span></span><br><span class="line"><span class="string">     &lt;br/&gt;</span></span><br><span class="line"><span class="string">    &lt;Link to="</span>/a/sub<span class="string">" style=&#123;&#123;color:'yellow'&#125;&#125;&gt;/a/sub&lt;/Link&gt;</span></span><br><span class="line"><span class="string">&#123;this.props.children&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ReactDOM.render(</span></span><br><span class="line"><span class="string">&lt;Router&gt;</span></span><br><span class="line"><span class="string">     &lt;Wrapper&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/a<span class="string">" component=&#123;A&#125;/&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="</span>/b<span class="string">" component=&#123;B&#125;/&gt;</span></span><br><span class="line"><span class="string"> &lt;/Wrapper&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;,</span></span><br><span class="line"><span class="string">document.getElementById('app')</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="React数据管理"><a href="#React数据管理" class="headerlink" title="React数据管理"></a>React数据管理</h2><ol><li><p>自顶向下的传递机制，子组件通过props可以获得父组件的信息</p><p>但是在两个兄弟组件之间传递数据就需要状态提升(即把状态放在公共父组件里)来进行交互。此处详情参考上文React框架基础指南(1)中的深入了解React之React组件。（适用于低数据量）</p></li><li><p>通过发布订阅模式做数据交互</p><blockquote><p>类似观察者模式，通过订阅中心替代祖先组件</p><p>子组件A发给订阅中心一个事件，事件中会带着一些信息(参数)，订阅中心再通过子组件B提供的数据接收方法，把信息传递给子组件B，从而达到数据更新的目的（适用于低数据量，事件是暴露的，不利于数据管理，容易造成数据的冲突和混乱）</p></blockquote></li><li><p>Redux等数据管理工具</p><blockquote><p>Redux单向数据流</p><p>类似于状态提升和发布订阅两种方式的结合</p><p>将所有的状态都保存在根组件(Store)中，处了Store还有一个Reducer,相当于Store中状态的管家，当子组件A想给子组件B做通信的时候，就从子组件A发出一个action，action中定义了需要做些什么，Reducer会接收到这个action,然后根据原有状态和这个action生成一个新的状态state传递给根组件也就是Store，当根组件发生变化的时候，就会驱动子组件B发生更新，也就完成了数据通信，可以解决数据流向混乱的问题，适用于大型数据的引用，不过需要引用的模块和概念较多，增加了系统的复杂性</p></blockquote></li><li><p>应用场景</p><ul><li>状态提升：组件层级扁平，兄弟组件通信情况很少（比如后台管理系统），大多是父子组件间的通信</li><li>发布订阅：业务规模较小，层级较深的业务</li><li>Redux：业务复杂，组件层级较深，兄弟组件通信密切</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React框架基础指南(1)</title>
      <link href="/2020/02/25/React%E5%9F%BA%E7%A1%8001/"/>
      <url>/2020/02/25/React%E5%9F%BA%E7%A1%8001/</url>
      
        <content type="html"><![CDATA[<h2 id="React的特点"><a href="#React的特点" class="headerlink" title="React的特点"></a>React的特点</h2><ol><li><p>视图层框架</p><blockquote><ul><li><p>一个构建用户界面的框架</p></li><li><p>声明式的框架</p></li><li><p>数据驱动DOM，再用事件反馈给数据</p></li></ul></blockquote></li><li><p>组件化</p><blockquote><ul><li><p>组件组合而不是继承</p></li><li><p>state&amp;&amp;props</p></li><li><p>生命周期</p></li></ul></blockquote></li><li><p>[^JSX]表达式（处理数据和DOM的关系）</p><blockquote><ul><li>一种[^JS]扩展的表达式</li><li>带有逻辑的标记语法，有别于HTML模板</li><li>对样式，逻辑表达式和事件的支持</li></ul></blockquote></li><li><p>虚拟DOM</p><blockquote><ul><li>对DOM进行模拟</li><li>比较操作前后的数据差异</li><li>如果由数据差异，统一操作DOM</li></ul></blockquote></li></ol><h2 id="React的优点和缺点"><a href="#React的优点和缺点" class="headerlink" title="React的优点和缺点"></a>React的优点和缺点</h2><blockquote><p>优点</p></blockquote><ol><li>简洁</li><li>灵活</li><li>高效</li></ol><blockquote><p>缺点</p></blockquote><ol><li>思维转换</li><li>依赖生态</li><li>变动频繁</li></ol><h2 id="深入了解React之JSX"><a href="#深入了解React之JSX" class="headerlink" title="深入了解React之JSX"></a>深入了解React之JSX</h2><ol><li><p>创建项目的方式</p><blockquote><ol><li><p>在已有项目上添加</p></li><li><p>通过create-react-app建立</p></li></ol><blockquote><p>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; yarn global add create-react-app</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>进入想指定的目录执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; create-react-app 文件名</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p> 使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; yarn start</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>就可以启动一个react项目了</p><p>项目启动后如果需要自定义webpack的配置则需要执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; yarn eject</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>然后目录就会多出一个config文件夹，打开</p><p>打开webpack.config.dev.js和</p><p>webpack.config.prod.js就可以根据自己的需要该配置了</p><p>不过这种方式不如在自定义的webpack中引入react来的方便，所以推荐第一种方式（详情参考<a href="(https://heaiwei.github.io/2020/02/24/webpack配置01/)">webpack配置和基础使用</a>这篇文章）</p></blockquote></blockquote></li><li><p>JSX语法</p><ul><li>JSX基本语法</li></ul><blockquote><p>相当于对象或者数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>jsx....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">jsx,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>ReactDOM.render接受的第一个参数就是jsx语法，表示需要渲染的组件</p><p>第二个参数表示选择器，即将样式挂载在某个标签里</p></blockquote><blockquote><p>jsx怎么插入样式（样式的属性是通过数据的形式给的）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> style=&#123;</span><br><span class="line">&gt; color: <span class="string">'red'</span>,</span><br><span class="line">&gt;     <span class="comment">//也可以是一个计算值，比如如下这种写法：</span></span><br><span class="line">&gt;     <span class="comment">//color: 'r' + 'ed'</span></span><br><span class="line">&gt; fontSize: <span class="string">'30px'</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">let</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>jsx....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>jsx中嵌入变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; let name=&apos;haw&apos;</span><br><span class="line">&gt; let jsx = &lt;div&gt;I am &#123;name&#125;&lt;/div&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>变量的使用和数组循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> name=<span class="string">'haw'</span>;</span><br><span class="line">&gt; <span class="keyword">let</span> flag=<span class="literal">true</span>;</span><br><span class="line">&gt; <span class="keyword">let</span> jsx = (</span><br><span class="line">&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;     &#123;/* 条件判断*/&#125;</span></span><br><span class="line"><span class="xml">&gt;    &#123;</span></span><br><span class="line"><span class="xml">&gt;         flag ? <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> : <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am not &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    &#125;</span></span><br><span class="line"><span class="xml">&gt;     &#123;/*数组循环*/&#125;</span></span><br><span class="line"><span class="xml">&gt;    &#123;</span></span><br><span class="line"><span class="xml">&gt;    names.map((name，index) =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>hello, I am &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">&gt;    &#125;</span></span><br><span class="line"><span class="xml">&gt;     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&gt;     );</span><br><span class="line">&gt; <span class="comment">//数组循环的时候需要在循环的标签上加上唯一的索引值key，一//般使用数组的索引作为key</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>ReactDOM</li><li>样式处理</li><li>数据逻辑处理</li></ul></li></ol><h2 id="深入了解React之React组件"><a href="#深入了解React之React组件" class="headerlink" title="深入了解React之React组件"></a>深入了解React之React组件</h2><ol><li><p>组件基本结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am haw<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Component/&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReactDOM.render的第一个参数既可以是jsx语法也可以是某个组件</span></span><br><span class="line"><span class="comment">//组件的首字母一定要大写</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ES6Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am haw in es6<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;ES6Component/&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>state&amp;&amp;props</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件中states的处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;<span class="comment">//props是父组件传给子组件的东西</span></span><br><span class="line"><span class="comment">//在子组件中只能被使用，不能改变</span></span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">name : <span class="string">'haw'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                 <span class="comment">//这个方法继承自React.Component</span></span><br><span class="line">                  name: <span class="string">"Haw Test"</span></span><br><span class="line">                  &#125;)</span><br><span class="line">       &#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am &#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Component/&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件中props的使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Component name=<span class="string">"haw"</span>/&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>事件处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line"><span class="keyword">this</span>.state=&#123;</span><br><span class="line">name : <span class="string">'haw test'</span>,</span><br><span class="line">age : <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// this.handleClick = this.handleClick.bind(this)</span></span><br><span class="line">      <span class="comment">//注意：一定要注意this的指向问题，一般要进行绑定</span></span><br><span class="line">      <span class="comment">//可以使用箭头函数解决绑定问题</span></span><br><span class="line">&#125;</span><br><span class="line">handleClick()&#123;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">age : <span class="keyword">this</span>.state.age + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">onValueChange(e)&#123;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">age : e.target.value</span><br><span class="line">            <span class="comment">//这里指的是输入框的内容</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;I am &#123;<span class="keyword">this</span>.state.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;I am &#123;this.state.age&#125; year old!&lt;/</span>p&gt;</span><br><span class="line"><span class="comment">//&lt;button onClick=&#123;this.handleClick&#125;&gt;加一岁&lt;/button&gt;</span></span><br><span class="line">&lt;button onClick=&#123;()=&gt;<span class="keyword">this</span>.handleClick()&#125;&gt;加一岁&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" onChange=&#123;(e) =&gt; &#123;this.onValueChange(e)&#125;&#125;/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">&lt;Component/</span>&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>组件的组合方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般方式，只需要在App组件中引入Component组件</span></span><br><span class="line"><span class="comment">//&#123;/*单纯组件*/&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div className=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;h1&gt;APP&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;hr/</span>&gt;</span><br><span class="line">&lt;Component/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">&lt;App/</span>&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用this.props传递数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div className=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;Title title=<span class="string">"App Title"</span>/&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">&lt;Component/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器式的组件组合方式</span></span><br><span class="line"><span class="comment">//使用this.props.children传递参数</span></span><br><span class="line"><span class="comment">//某些方面可以比this.props在组件的组合中更加有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div className=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;Title&gt;</span><br><span class="line">    &lt;span&gt;App Span&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href=""&gt;link&lt;/</span>a&gt;</span><br><span class="line">    &lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/注意这里和上面的不同之处</span></span><br><span class="line"><span class="regexp">    &lt;hr/</span>&gt;</span><br><span class="line">&lt;Component/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>组件间的数据通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父子组件中的通信</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line">handleClick()&#123;</span><br><span class="line"><span class="keyword">this</span>.props.changeColor(<span class="string">'red'</span>)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;父组件背景色：&#123;<span class="keyword">this</span>.props.bgColor&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;()=&gt;this.handleClick()&#125;&gt;改变父组件颜色&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Father extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props);</span></span><br><span class="line"><span class="regexp">this.state = &#123;</span></span><br><span class="line"><span class="regexp">bgColor : 'green'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">onBgColorChange(color)&#123;</span></span><br><span class="line"><span class="regexp">this.setState(&#123;</span></span><br><span class="line"><span class="regexp">bgColor : color</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render(props)&#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;div style=&#123;&#123;background: this.state.bgColor&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">&lt;Child bgColor=&#123;this.state.bgColor&#125; changeColor=&#123;(color) =&gt;&#123;this.onBgColorChange(color)&#125;&#125;/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">&lt;Father/</span>&gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兄弟组件中的通信</span></span><br><span class="line"><span class="comment">//思路：把需要改变的状态存入负组件中,子组件通过回调改变父组件的</span></span><br><span class="line"><span class="comment">//状态然后改变另一个子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line">handleClick()&#123;</span><br><span class="line"><span class="keyword">this</span>.props.changeChild2Color(<span class="string">'red'</span>)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;Child1: &#123;<span class="keyword">this</span>.props.bgColor&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;()=&gt;this.handleClick()&#125;&gt;改变Child2背景颜色&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Child2 extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">return(</span></span><br><span class="line"><span class="regexp">&lt;div style=&#123;&#123;background:this.props.child2bgColor&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">&lt;h1&gt;Child2背景颜色: &#123;this.props.child2bgColor&#125;&lt;/</span>h1&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Father extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">super(props);</span></span><br><span class="line"><span class="regexp">this.state = &#123;</span></span><br><span class="line"><span class="regexp">child2bgColor : 'green'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">onChild2ColorChange(color)&#123;</span></span><br><span class="line"><span class="regexp">this.setState(&#123;</span></span><br><span class="line"><span class="regexp">child2bgColor : color</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">render(props)&#123;</span></span><br><span class="line"><span class="regexp">return (</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">&lt;Child1 changeChild2Color=&#123;(color) =&gt; &#123;this.onChild2ColorChange(color)&#125;&#125;/</span>&gt;</span><br><span class="line">&lt;Child2 child2bgColor=&#123;<span class="keyword">this</span>.state.child2bgColor&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack配置和基础使用</title>
      <link href="/2020/02/24/webpack%E9%85%8D%E7%BD%AE01/"/>
      <url>/2020/02/24/webpack%E9%85%8D%E7%BD%AE01/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装webpack</p><blockquote><p>yarn add <a href="mailto:webpack@3.10.0" target="_blank" rel="noopener">webpack@3.10.0</a> –dev</p></blockquote></li><li><p>需要处理的文件类型 </p><table><thead><tr><th align="center">文件类型</th><th align="center">webpack插件</th></tr></thead><tbody><tr><td align="center">HTML</td><td align="center">html-webpack-plugin</td></tr><tr><td align="center">脚本</td><td align="center">babel+babel-present-react</td></tr><tr><td align="center">样式</td><td align="center">css-loader+sass-loader</td></tr><tr><td align="center">图片/字体</td><td align="center">url-loader+file-loader</td></tr></tbody></table></li><li><p>webpack常用模块</p><ul><li>html-webpackplugin，html单独打包成文件</li><li>extract-text-webpack-plugin，样式打包成文件</li><li>CommonsChunkplugin，提出通用模块</li></ul></li><li><p>webpack-dev-server</p><ul><li>为webpack项目提供web服务、</li><li>适用版本：2.9.7</li><li>更改代码自动刷新，路径转发</li><li>安装方式：yarn add <a href="mailto:webpack-dev-server@2.9.7" target="_blank" rel="noopener">webpack-dev-server@2.9.7</a> –dev</li></ul></li><li><p>webpack的四个核心概念：</p><ul><li>入口（entry）</li><li>出口（output）</li><li>loader</li><li>插件（plugin）</li></ul></li></ol><h2 id="使用webpack打包文件"><a href="#使用webpack打包文件" class="headerlink" title="使用webpack打包文件"></a><strong>使用webpack打包文件</strong></h2><ol><li><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundles</em>，以及如何命名这些文件，默认值为 <code>./dist</code>。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//在根目录下创建一个webpack配置的js文件</span></span><br><span class="line">&gt; <span class="comment">//命名为webpack.config.js</span></span><br><span class="line">&gt; <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">&gt;   entry: <span class="string">'./src/app.js'</span>,  <span class="comment">//入口文件，表示从哪出开始读</span></span><br><span class="line">&gt;   output: &#123;</span><br><span class="line">&gt;     path: path.resolve(__dirname, <span class="string">'dist'</span>),  <span class="comment">//表示打包后的文件的输出位置</span></span><br><span class="line">&gt;       <span class="comment">//第一个参数表示当前目录,</span></span><br><span class="line">&gt;     filename: <span class="string">'app.js'</span></span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>在src目录下的app.js中添加js代码</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//任意一段js代码都行</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">"hello webpack"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>在根目录下打开git bush执行<strong>打包</strong>命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>回车后就可以对app.js文件进行打包，webpack将代码进行打包并输出到根目录下的dist目录下面的app.js</p></li></ol><h2 id="打包HTML文件"><a href="#打包HTML文件" class="headerlink" title="打包HTML文件"></a>打包HTML文件</h2><ol><li><p>在webpack的中文文档中搜索HtmlWebpackPlugin</p><p><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener"><code>HtmlWebpackPlugin</code></a>简化了HTML文件的创建，安装命令是：yarn add <a href="mailto:html-webpack-plugin@2.30.1" target="_blank" rel="noopener">html-webpack-plugin@2.30.1</a></p></li><li><p>在webpack.config.js中配置HtmlWebpackPlugin：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在output:&#123;****&#125;的下面配置如下代码：</span></span><br><span class="line">plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()]</span><br><span class="line"></span><br><span class="line"><span class="comment">//同时需要导入HtmlWebpackPlugin</span></span><br><span class="line"><span class="comment">//在配置的首部导入该模块，代码如下：</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure></li><li><p>git bush执行命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装:yarn add html-webpack-plugin@2.30.1然后执行</span></span><br><span class="line">node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>回车后就可以对app.js文件进行打包，webpack将代码进行打包并输出到根目录下的dist目录下面的index.html</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在HtmlWebpackPlugin()中添加参数可以自定义模板</span></span><br><span class="line"><span class="comment">//其中template表示的就是自定义模板的路径（需要在src下建立一个同名文件和自定义的代码）</span></span><br><span class="line">plugins: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">'./src/index.html'</span></span><br><span class="line">        &#125;)]</span><br><span class="line"><span class="comment">//后面步骤同上</span></span><br></pre></td></tr></table></figure><p>HtmlWebpackPlugin的更多用法请参阅<a href="https://github.com/jantimon/html-webpack-plugin#options" target="_blank" rel="noopener">插件文档</a>。</p></li></ol><h2 id="打包脚本文件（babel）"><a href="#打包脚本文件（babel）" class="headerlink" title="打包脚本文件（babel）"></a>打包脚本文件（babel）</h2><ol><li><p>babel-loader的安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官方文档搜索babel-loader,安装命令：</span></span><br><span class="line">yarn add babel-core@<span class="number">6.26</span><span class="number">.0</span>  babel-preset-env@<span class="number">1.6</span><span class="number">.1</span> babel-loader@<span class="number">7.1</span><span class="number">.2</span> --dev</span><br></pre></td></tr></table></figure></li><li><p>在webpack.config.js中配置babel</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">   ********----<span class="comment">//查阅官方文档</span></span><br><span class="line">      options: &#123;</span><br><span class="line">          presets: [<span class="string">'env'</span>] <span class="comment">//注意这里需要改动，表示自动根据环境进行打包</span></span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装babel脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-core@<span class="number">6.26</span><span class="number">.0</span> babel-preset-env@<span class="number">1.6</span><span class="number">.1</span> babel-loader@<span class="number">7.1</span><span class="number">.2</span> --dev</span><br></pre></td></tr></table></figure></li><li><p>git bush执行命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入以下命令就可以使用babel了，将ES6语法转化为ES5</span></span><br><span class="line">node_modules/.bin/webpack</span><br></pre></td></tr></table></figure></li></ol><h2 id="打包React文件"><a href="#打包React文件" class="headerlink" title="打包React文件"></a>打包React文件</h2><ol><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装命令:</span></span><br><span class="line">yarn add babel-preset-react@<span class="number">6.24</span><span class="number">.1</span> --dev</span><br></pre></td></tr></table></figure></li><li><p>安装完成进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在babel插件的配置代码中加入react即可即如下：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">   ********----<span class="comment">//查阅官方文档</span></span><br><span class="line">      options: &#123;</span><br><span class="line">          presets: [<span class="string">'env'</span>,<span class="string">'react'</span>] </span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后安装react的相关依赖包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn add react@<span class="number">16.2</span><span class="number">.0</span> react-dom@<span class="number">16.2</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></li><li><p>将src目录下的app.js文件修改为app.jsx文件，在配置文件中将</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口文件需要修改为jsx文件，如下:</span></span><br><span class="line">entry: <span class="string">'./src/app.jsx'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel的配置代码中的</span></span><br><span class="line">test:<span class="regexp">/\.js$/</span>,</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line">test:<span class="regexp">/\.jsx$/</span>,</span><br></pre></td></tr></table></figure></li><li><p>git bush执行命令：node_modules/.bin/webpack</p></li></ol><h2 id="打包样式CSS文件"><a href="#打包样式CSS文件" class="headerlink" title="打包样式CSS文件"></a>打包样式CSS文件</h2><ol><li><p>在官网中搜索css指南（按照官网配置）</p></li><li><p>安装css-loader和style-loader:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader@<span class="number">0.19</span><span class="number">.1</span> css-loader@<span class="number">0.28</span><span class="number">.8</span> --dev</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中加入配置代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [<span class="comment">//与之前的是同一个地方，只需添加下面的即可</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>在src目录下新建一个css文件，命令为index.css</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在同级目录下的app.jsx下引入这个css文件</span><br></pre></td></tr></table></figure></li><li><p>git bush执行命令：node_modules/.bin/webpack</p></li><li><p>这种方式加载css速度较慢，存在较长的白屏时间，所以推荐使用如下插件：</p><h5 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a>ExtractTextWebpackPlugin</h5><ul><li><p>安装插件：yarn add <a href="mailto:extract-text-webpack-plugin@3.0.2" target="_blank" rel="noopener">extract-text-webpack-plugin@3.0.2</a></p></li><li><p>配置插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先引入ExtractTextPlugin插件</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//然后在plugin中创建该插件</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后在modeul中的rules下更改use:</span></span><br><span class="line">use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: <span class="string">"css-loader"</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>+ 执行打包命令</code></pre><h2 id="打包样式sass文件"><a href="#打包样式sass文件" class="headerlink" title="打包样式sass文件"></a>打包样式sass文件</h2><ol><li><p>官网搜索sass-loader</p></li><li><p>安装命令：yarn add <a href="mailto:sass-loader@6.0.6" target="_blank" rel="noopener">sass-loader@6.0.6</a>  –dev </p></li><li><p>安装命令：yarn add <a href="mailto:node-sass@4.7.2" target="_blank" rel="noopener">node-sass@4.7.2</a> –dev </p><blockquote><p>此处如果安装失败（多半是网络问题）可以使用淘宝镜像下载，如下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm uninstall node-sass</span><br><span class="line">&gt; npm i node-sass --sass_binary_site=https:<span class="comment">//npm.taobao.org/mirrors/node-sass/</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>配置文件中加入相关配置代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rules:[&#123;</span><br><span class="line">        test: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// Creates `style` nodes from JS strings</span></span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="comment">// Translates CSS into CommonJS</span></span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="comment">// Compiles Sass to CSS</span></span><br><span class="line">          <span class="string">'sass-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,]</span><br></pre></td></tr></table></figure></li><li><p>在src目录下新建一个scss文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">#app&#123;</span><br><span class="line">    <span class="selector-tag">font-size</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在app.jsx中导入scss文件</p></li><li><p>执行打包命令</p></li></ol><h2 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h2><ol><li><p>在官网的指南中找到资源管理</p></li><li><p>找到加载图(file-loader不如url-loader)</p></li><li><p>然后搜索url-loader，安装命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add file-loader@<span class="number">1.1</span><span class="number">.6</span> url-loader@<span class="number">0.6</span><span class="number">.2</span> --dev</span><br></pre></td></tr></table></figure></li><li><p>配置代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       test: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">       use: [</span><br><span class="line">         &#123;</span><br><span class="line">           loader: <span class="string">'url-loader'</span>,</span><br><span class="line">           options: &#123;</span><br><span class="line">             limit: <span class="number">8192</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       ],</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li><li><p>将图片1.jpg放入src目录下面，然后将scss文件中的背景设置为该图片，执行打包命令即可</p></li></ol><h2 id="打包字体文件"><a href="#打包字体文件" class="headerlink" title="打包字体文件"></a>打包字体文件</h2><ol><li><p>好用的字体库：<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a></p></li><li><p>安装字体库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add font-awesome</span><br></pre></td></tr></table></figure></li><li><p>在app.jsx中导入字体库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;font-awesome/css/font-awesome.min.css&apos;</span><br></pre></td></tr></table></figure></li><li><p>在jsx中加入字体文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i className="fa fa-address-book"&gt;&lt;/i&gt;  //字体库中的代码:fa fa-address-book</span><br></pre></td></tr></table></figure></li><li><p>在官网的指南中找到资源管理然后找到加载字体</p></li><li><p>字体图标的配置代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       test: /\.(eot|svg|ttf|woff|woff2|otf)$/i,</span><br><span class="line">       use: [</span><br><span class="line">         &#123;</span><br><span class="line">           loader: &apos;url-loader&apos;,</span><br><span class="line">           options: &#123;</span><br><span class="line">             limit: 8192,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">       ],</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li><li><p>执行打包命令</p></li></ol><h2 id="提出公共模块"><a href="#提出公共模块" class="headerlink" title="提出公共模块"></a>提出公共模块</h2><ol><li><p>这是webpack自带的插件,不需要下载安装，在配置文件的plugin中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要引入插件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(<span class="string">"css/[name].css"</span>),</span><br><span class="line">    <span class="comment">//表示存放在根目录下的css文件夹下</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name : <span class="string">'common'</span>,</span><br><span class="line">    filename : <span class="string">'js/base.js'</span></span><br><span class="line">    <span class="comment">//表示存放在根目录下的js文件夹下</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置文件中其他位置的更改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve (__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'js/app.js'</span></span><br><span class="line">    <span class="comment">//表示存放在根目录下的js文件夹下</span></span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"> &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; </span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line">              name: <span class="string">'resourse/[name].[ext]'</span></span><br><span class="line">              <span class="comment">//表示存放在根目录下的resourse文件夹下</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="comment">//字体文件的更改同上</span></span><br></pre></td></tr></table></figure></li><li><p>执行打包命令</p></li></ol><h2 id="webpack打包命令的升级"><a href="#webpack打包命令的升级" class="headerlink" title="webpack打包命令的升级"></a>webpack打包命令的升级</h2><ol><li><p>官网搜索webpack-dev-server,它能实时重新加载</p></li><li><p>安装命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server@<span class="number">2.9</span><span class="number">.1</span> --dev</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>git bush执行命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/webpack-dev-server</span><br><span class="line"><span class="comment">//启动一个http服务</span></span><br><span class="line"><span class="comment">//默认运行在8080端口</span></span><br><span class="line"><span class="comment">// http://localhost:8080/</span></span><br></pre></td></tr></table></figure></li><li><p>当改用端口启动后，项目目录会发生变化，此时需要在配置文件的output中添加代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">publicPath: <span class="string">'/dist'</span>,</span><br><span class="line"><span class="comment">//当这里进行了配置后devServer中就不需要配置了，修改为：</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">     <span class="comment">//contentBase: './dist',</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></li><li><p>重新执行node_modules/.bin/webpack-dev-server</p></li><li><p>此时的入口变成了：<a href="http://localhost:8080/dist" target="_blank" rel="noopener">http://localhost:8080/dist</a></p><blockquote><p>通过这个插件就可以在更改代码的时候游览器自动刷新重新显示了</p></blockquote><ol start="8"><li><p>8080端口容易冲突，所以可以通过以下配置代码更改端口号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> devServer: &#123;</span><br><span class="line">    port:<span class="number">8086</span></span><br><span class="line">   &#125;,</span><br><span class="line"><span class="comment">//重新启动即可</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>在package.json中添加几个脚本可以使得更加简便：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev" : "node_modules/.bin/webpack-dev-server",</span><br><span class="line">    //在git bush中就可以通过输入yarn run dev就相当于执行了  </span><br><span class="line">    //node_modules/.bin/webpack-dev-server以下命令也是</span><br><span class="line">    "dist": "node_modules/.bin/webpack -p"</span><br><span class="line">    //这条命令就是线上环境的打包</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 打包工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs与Yarn的安装与使用</title>
      <link href="/2020/02/24/Nodejs%E4%B8%8EYarn/"/>
      <url>/2020/02/24/Nodejs%E4%B8%8EYarn/</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a><strong>Nodejs</strong></h1><p>1.Nodejs的安装</p><blockquote><p>百度Nodejs   进入官网选择.msi文件进行下载 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p></blockquote><h1 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a><strong>Yarn</strong></h1><ol><li><p>Yarn的安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure></li><li><p>Yarn的常用语法</p><table><thead><tr><th align="center">Yarn</th><th align="center">Npm</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">yarn init</td><td align="center">npm init</td><td align="center">项目初始化</td></tr><tr><td align="center">yarn</td><td align="center">npm install</td><td align="center">安装当前文件里package.json里指定文件的包</td></tr><tr><td align="center">yarn global add <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a></td><td align="center">npm install <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a> -g</td><td align="center">项目本地安装指定的包</td></tr><tr><td align="center">yarn add <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a></td><td align="center">npm install <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a> –save</td><td align="center">项目本地安装指定的包</td></tr><tr><td align="center">yarn add <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a> –dev</td><td align="center">npm install <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a> –save-dev</td><td align="center">安装一个开发状态下的包</td></tr><tr><td align="center">yarn remove xxx</td><td align="center">npm uninstall <a href="mailto:xxx@x.x.x" target="_blank" rel="noopener">xxx@x.x.x</a> –save(-dev)</td><td align="center">删除一个包</td></tr><tr><td align="center">yarn run xxx</td><td align="center">npm run xxx</td><td align="center">执行命令</td></tr></tbody></table></li></ol><ol start="3"><li><p>windows下推荐使用yarn官网安装包安装yarn，也可以使用npm命令下载</p></li><li><p>当创建一个项目的时候，首先需要初始化项目，需要用到的命令时yarn init</p><blockquote><p>注意：windows下不能用git bash初始化，需要使用cmd命令提示符进行yarn init</p></blockquote></li><li><p>初始化后文件夹下会出现一个package.json的文件，存放的是项目相关的包</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装与使用手册</title>
      <link href="/2020/02/24/git%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2020/02/24/git%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="windows下git的安装"><a href="#windows下git的安装" class="headerlink" title="windows下git的安装"></a><strong>windows下git的安装</strong></h1><ol><li><p>百度git官网，下载链接：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p></li><li><p>点击下载好的安装包进行安装</p></li><li><p>一直点击next，知道出现install，点击install，安装完成后点击finish</p></li><li><p>检查git是否安装成功</p><blockquote><p>键盘Ctrl+r,输入cmd回车进入命令提示符，输入git回车，出现相关信息则表示安装成功</p></blockquote></li><li></li></ol><h1 id="windows下的环境配置"><a href="#windows下的环境配置" class="headerlink" title="windows下的环境配置"></a><strong>windows下的环境配置</strong></h1><ol><li><p>点击桌面上的Git Bash快捷图标，用github账号进行环境配置</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名</span><br><span class="line">git config --global user.name <span class="string">"username"</span>    <span class="comment">//（ "username"是自己的账户名，）</span></span><br><span class="line"># 配置邮箱</span><br><span class="line">git config --global user.email <span class="string">"username@email.com"</span>     <span class="comment">//("username@email.com"注册账号时用的邮箱)</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成ssh</span></span><br><span class="line"><span class="comment">//继续刚才的操作，在命令框中输入以下命令，</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后连敲三次回车键，结束后去系统盘目录下（一般在 C:\Users\你的用户名.ssh）查看是否有.ssh文件夹生成，此文件夹中以下两个文件id_rsa和id_rsa.pub</p></li><li><p>将ssh文件夹中的公钥（ id_rsa.pub）添加到GitHub管理平台中，在GitHub的个人账户的设置中找到SSH and GPG keys选项</p><p>title随便起一个，将公钥（ id_rsa.pub）文件中内容复制粘贴到key中，然后点击Ass SSH key就行</p></li><li><p>测试一下配置是否成功，在Git Bush命令框（就是刚才配置账号和邮箱的命令框）中继续输入以下命令，回车</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>要是看见下面的这句话就说明配置好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hi ~~~~ you`ve successfully authenticated......</span><br></pre></td></tr></table></figure></li></ol><h1 id="windows下git的使用"><a href="#windows下git的使用" class="headerlink" title="windows下git的使用"></a><strong>windows下git的使用</strong></h1><p>右键选择git bash进入git命令行</p><ol><li><p>git –version命令查看git版本</p></li><li><p>vim ~/.gitconfig进入配置界面，点击i进入编辑模式</p></li><li><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">      name=***</span><br><span class="line">      email=**********@qq.com</span><br><span class="line">[alias]</span><br><span class="line">      co=checkout</span><br><span class="line">      ci=commit</span><br><span class="line">      st=status</span><br><span class="line">      pl=pull</span><br><span class="line">      ps=push</span><br><span class="line">      dt=difftool</span><br><span class="line">      ca=commit -am</span><br><span class="line">      b=branch</span><br></pre></td></tr></table></figure><p>然后按esc键或者Ctrl+c或者Ctrl+【输入:wq保存并退出</p></li><li><p>cat ~/.gitconfig命令可以查看配置目录</p></li></ol><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a><strong>创建仓库</strong></h1><ol><li><p>生成公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ssh-keygen -t rsa -C &apos;邮箱号&apos;</span><br></pre></td></tr></table></figure><p>回车即可。生成.ssh文件夹，和上面的生成公钥一样</p></li><li><p>在github或者gitee上建立仓库，并将公钥进行绑定</p></li><li><p>克隆的时候以ssh地址的方式对代码进行copy</p><p>（mkdir doc在当前目录下生成文件夹，ls命令查看当前目录下的所有文件，ls -al 查看隐藏文件）</p></li><li><p>git clone  (这里是上面的ssh地址)对代码进行拷贝</p></li><li><p>进入该文件夹就可以查看克隆下来的代码文件了</p></li><li><p>在该文件夹<strong>下</strong>设置忽略文件即.gitignore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开忽略配置</span></span><br><span class="line">vim .gitignore</span><br><span class="line"><span class="comment">//输入i编辑设置忽略文件</span></span><br><span class="line">node_modules</span><br><span class="line">dist</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure></li><li><p>在该文件夹下上传代码文件至托管平台上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.提交到本地</span></span><br><span class="line">git add .</span><br><span class="line">git ca <span class="string">"initial"</span></span><br><span class="line"><span class="comment">//2.推送到远程</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码提交过程"><a href="#代码提交过程" class="headerlink" title="代码提交过程"></a>代码提交过程</h2><ol><li>从mask切换到开发分支上</li><li>git merge origin masker，拉取远程仓库最新的代码</li><li>git add .，追踪文件的变化</li><li>git commit -am “备注信息”，将代码提交到本地仓库</li><li>git push，本地仓库代码推送到远程仓库</li><li>当代码达到生产要求时候才能提交pull request，管理员审核</li></ol><blockquote><p>git status 查看当前状态</p><p>git diff  查看每个文件的变化</p><p>git dt  查看原来文件和最新文件的对比</p><p>git co -b admin-v2  切换一个新分支（由主分支master变成admin-v2分支）</p><p>git b  查看所有分支</p><p>然后进行代码提交：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; git add .</span><br><span class="line">&gt; git ca <span class="string">"初始化"</span></span><br><span class="line">&gt; <span class="comment">//git push会报错，因该是以下语句:</span></span><br><span class="line">&gt; git push --set-upstream origin admin-v2</span><br><span class="line">&gt; <span class="comment">//然后在平台上进行相关操作即可</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><ol start="7"><li><p>给上次的提交结果打上一个标记，方便可以查看这一阶段的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag tag-initial</span><br><span class="line">git push origin tag-initial</span><br><span class="line"><span class="comment">//这样就可以把新建的tag提交到远程</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代码提交 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游览器的本地存储</title>
      <link href="/2020/02/23/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/2020/02/23/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>cookie</strong></p><ol><li><p>用户端保存请求信息的机制</p></li><li><p>分号分隔的多个key-value字段</p></li><li><p>存储在本地的加密文件里</p></li><li><p>域名和路径的限制</p></li></ol><blockquote><p><strong>cookie中的一些字段</strong></p><blockquote><p>name：cookie名称</p><p>domian：cookie生效的域名</p><p>path：cookie生效的路径</p><p>expires：cookie过期时间</p><p>HttpOnly：用户不可更改</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游览器中查看cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie</span><br><span class="line"><span class="comment">//添加cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=Rosen;domain=happymmall.com;path=/index.html;'</span></span><br><span class="line"><span class="comment">//获取格林威治时间</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.toUTCString()</span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line"><span class="comment">//将cookie的expirse即cookie的时间改为过期即可</span></span><br></pre></td></tr></table></figure><p><strong>session</strong></p><ol><li><p>服务端保存请求信息的机制</p></li><li><p>sessionId填充存放在cookie中</p></li><li><p>会话由游览器控制，会话结束，session失效</p></li></ol><p><strong>localStorage</strong></p><ol><li><p>H5新特性</p></li><li><p>有域名限制，不存在作用域概念</p></li><li><p>只有key-value</p></li><li><p>没有过期时间</p></li><li><p>游览器关闭后不会消失</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加localStorage</span></span><br><span class="line"><span class="built_in">window</span>.loaclStorage.setItem(<span class="string">'name'</span>,<span class="string">'Rosen'</span>);</span><br><span class="line"><span class="comment">//查看localStorage</span></span><br><span class="line"><span class="built_in">window</span>.localStorage.getItem(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//删除localStorage</span></span><br><span class="line"><span class="built_in">window</span>.localStorage.remove(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//不能添加对象进去，如果添加对象，相当于执行该对象的toStirng()方法</span></span><br><span class="line"><span class="built_in">window</span>.loaclStorage.setItem(<span class="string">'name'</span>,&#123;<span class="attr">name</span>: <span class="string">'Rosen'</span>&#125;);</span><br><span class="line"><span class="comment">//结果为:"[object object]"</span></span><br><span class="line"><span class="comment">//如果需要添加对象，可以使用JSON格式的stringify方法将对象转换为字符串，如下：</span></span><br><span class="line"><span class="built_in">window</span>.loaclStorage.setItem(<span class="string">'name'</span>,<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">'Rosen'</span>&#125;));</span><br><span class="line"><span class="comment">//结果为:"&#123;"name":"Rosen"&#125;"</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>sessionStorage</strong></p><ol><li>和localStorage极其相似</li><li>游览器关闭后消失</li></ol>]]></content>
      
      
      <categories>
          
          <category> storage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
            <tag> Html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础语法(2)</title>
      <link href="/2020/02/23/ES602/"/>
      <url>/2020/02/23/ES602/</url>
      
        <content type="html"><![CDATA[<ol><li><p>面向对象—类</p><blockquote><p>关键词：class</p></blockquote><blockquote><p>语法糖：对应function</p></blockquote><blockquote><p>构造函数：constructor</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">&gt;         <span class="keyword">this</span>.name = name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     getName()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;  </span><br><span class="line">&gt; <span class="comment">//实例化一个类</span></span><br><span class="line">&gt; <span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">'animal name'</span>); <span class="comment">//初始化构造函数中的参数</span></span><br><span class="line">&gt; <span class="comment">//构造函数的用法</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(animal.getName)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>面向对象—类的继承</p><blockquote><p>extends：类的继承</p></blockquote><blockquote><p>super：调用父类的构造函数</p><p>this：谁调用指向的就是谁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">constructor</span>()&#123;</span><br><span class="line">&gt;         <span class="keyword">this</span>.name = <span class="string">'animal name'</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     getName()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">&gt;     <span class="keyword">constructor</span>()&#123;</span><br><span class="line">&gt;         <span class="keyword">super</span>();</span><br><span class="line">&gt;         <span class="keyword">this</span>.name = <span class="string">'cat'</span>;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">let</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">&gt; <span class="keyword">let</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line">&gt; <span class="built_in">console</span>.log(animal.getName())</span><br><span class="line">&gt; <span class="built_in">console</span>.log(cat.getName())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>面向对象—对象</p><blockquote><p>对象里属性的简写</p><p>对象里方法的简写</p><p>属性名可以作为表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//对象的用法</span></span><br><span class="line">&gt; <span class="keyword">var</span> name = <span class="string">'Hae'</span>,</span><br><span class="line">&gt;     age = <span class="number">18</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> obj=&#123;</span><br><span class="line">&gt;     name : name,</span><br><span class="line">&gt;     age : age,</span><br><span class="line">&gt;     getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     getAge : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">var</span> name = <span class="string">'Hae'</span>,</span><br><span class="line">&gt;     age = <span class="number">18</span>;</span><br><span class="line">&gt; <span class="comment">//将上面的对象进行简化</span></span><br><span class="line">&gt; <span class="keyword">let</span> obj = &#123;</span><br><span class="line">&gt;     <span class="comment">//变量名可以直接用作对象的属性名称</span></span><br><span class="line">&gt;     name,</span><br><span class="line">&gt;     age,</span><br><span class="line">&gt;     <span class="comment">//对象里的方法可以简写</span></span><br><span class="line">&gt;     getName()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&gt;     &#125;,</span><br><span class="line">&gt;     <span class="comment">//表达式作为属性名或者方法</span></span><br><span class="line">&gt;     [<span class="string">'get'</span> + <span class="string">'Age'</span>]()&#123;</span><br><span class="line">&gt;         <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><blockquote><p>其他拓展</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Object</span>.keys(obj)<span class="comment">//是一个数组(将对象中的属性和方法提取出来)</span></span><br><span class="line">&gt; <span class="comment">//其中的变量obj是上例中的对象obj</span></span><br><span class="line">&gt; <span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;,&#123;<span class="attr">b</span>: <span class="number">2</span>&#125;)<span class="comment">//合并两个对象</span></span><br><span class="line">&gt; <span class="comment">//结果是: &#123;a: 1,b: 2&#125; 如果数据重叠则会进行覆盖</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li><li><p>ES6模块化</p><blockquote><p>解决一个复杂问题时候自顶向下逐层把系统划分为若干模块的过程 </p></blockquote><blockquote><p>关键词：export，import，as，default</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">&lt;!-- 同级目录下三个文件index.html即此代码，index.js,module.js --&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//module.js</span></span><br><span class="line">&gt; <span class="keyword">let</span> str = <span class="string">'string'</span>;</span><br><span class="line">&gt; <span class="keyword">let</span> obj = &#123;</span><br><span class="line">&gt;     name : <span class="string">'Rosen'</span></span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; <span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="string">'module test'</span>)</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">export</span> &#123;</span><br><span class="line">&gt;     str,</span><br><span class="line">&gt;     obj,</span><br><span class="line">&gt;     fn</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="comment">//这个模块输出的就是str,obj,fn</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line">&gt; <span class="comment">//模块默认的输出</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//index.js</span></span><br><span class="line">&gt; <span class="keyword">import</span> &#123;str <span class="keyword">as</span> string, obj, fn&#125; <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">//模块的引入</span></span><br><span class="line">&gt; <span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'./module.js'</span> <span class="comment">//默认模块的引入foo变量名可以随便更改</span></span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'name'</span>: obj.name);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'string'</span>: string);</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'fn'</span>: fn);</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6基础语法(1)</title>
      <link href="/2020/02/23/ES601/"/>
      <url>/2020/02/23/ES601/</url>
      
        <content type="html"><![CDATA[<ol><li><p>什么是ES6?</p><blockquote><p>是ECMA Script, Javascript的语言标准</p></blockquote><blockquote><p>提升JS编写大型的复杂的应用程序的能力</p></blockquote><blockquote><p>Babel：ES6-&gt;ES5(一种将ES6转换为ES5的工具)</p></blockquote></li></ol><ol start="2"><li><p>let, const关键字</p><blockquote><p> let定义变量，const定义常量</p></blockquote><blockquote><p>不能重复定义</p></blockquote><blockquote><p>块级作用域</p></blockquote><blockquote><p>不存在变量提升</p></blockquote></li><li><p>箭头函数</p><blockquote><p>参数=&gt;表达式/语句</p></blockquote><blockquote><p>继承外层作用域</p></blockquote><blockquote><p>不能用作构造函数</p></blockquote><blockquote><p>没有prototype属性</p></blockquote></li><li><p>模板字符串</p><blockquote><p>反引号标识``</p></blockquote><blockquote><p>支持多行字符串</p></blockquote><blockquote><p>支持变量([^${变量}])和表达式</p></blockquote></li><li><p>Promise</p><blockquote><p>Promise对象是为了解决异步回调函数从头嵌套的问题</p></blockquote><blockquote><p>关键词：创建Promise时的参数resolve,reject以及表示结果的then</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">&gt;     $.ajax(&#123;</span><br><span class="line">&gt;         url : <span class="string">'http://happymall.com/user/get_cart_product.do'</span>,</span><br><span class="line">&gt;         type : <span class="string">'post'</span>,</span><br><span class="line">&gt;         success(res)&#123;</span><br><span class="line">&gt;             resolve(res);</span><br><span class="line">&gt;         &#125;,</span><br><span class="line">&gt;         error(err)&#123;</span><br><span class="line">&gt;             reject(err);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;);</span><br><span class="line">&gt; &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">&gt;     <span class="built_in">console</span>.log(<span class="string">'success:'</span>,res)</span><br><span class="line">&gt; &#125;,(err)=&gt;&#123;</span><br><span class="line">&gt;    <span class="built_in">console</span>.log(<span class="string">'error:'</span>,err) </span><br><span class="line">&gt; &#125;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React面试笔记</title>
      <link href="/2020/02/22/reactNo1/"/>
      <url>/2020/02/22/reactNo1/</url>
      
        <content type="html"><![CDATA[<ol><li>游览器里输入一个地址后都会发生些什么？</li><li>webpack的作用和用法，优点有什么？</li><li>有哪些设计模式？</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ps教程</title>
      <link href="/2020/02/22/ps/"/>
      <url>/2020/02/22/ps/</url>
      
        <content type="html"><![CDATA[<p> Ps用处：修图，平面设计（logo、海报等），绘图，动图，表情包</p><ol><li>工具面板<br>文字T键入——放大镜（Alt切换）——抓手（移动画布）；Ctrl+0以最大呈现<br>新建工作区：导航器，画笔，字符</li><li>图层面板<br>混合模式：滤色（滤去深色）<br>文字立体感：可投影（图层样式）</li><li>图片裁剪<br>图像→画布大小【需要先解除锁定】：Ctrl+T【自动变换工具】选中图片，shift等比例缩放，Alt中心缩放</li><li>蒙版【图片合成】：不破坏原始素材进行修改<br>拖动→添加蒙版（细微修改：流量、不透明度）→画笔（黑透白不透）</li><li>校色<br>新建调整图层→曲线（调节明暗）、色彩平衡<br>【只影响下一张图片：创建剪切图层】</li><li>钢笔工具【抠图：不用选区和蒙版（蒙版抠图柔和不精确）】<br>好习惯：Ctrl+J复制图层→隐藏<br>曲线：按住左键←直线（Alt：转换点工具/一侧变换点击一端点）<br>Ctrl：改变锚点位置<br>增加锚点：点击两点之间<br>减少锚点：点击一点<br>系统新建形状→Ctrl+Z退回，惦记着最后一个点连接</li><li>修片：<br>①修复红眼：使用红眼修复工具（需选中整个眼睛）<br>②污渍修复工具：可小地方修修改→就近取色<br>③修复画笔工具：Alt+拾色（可任取色，且过渡更自然）<br>④仿制图章：Alt+拾色（任取色，过渡相对不是和和谐）<br>⑤修补工具→去水印</li><li>文字：选“平滑”消除锯齿，调整字体和间距<br>【制作光晕】：使用智能对象（智能对象：可无限期修改）<br>新建图层→填充前景黑色→滤镜/渲染/光线<br>混合模式：【滤色】<br>裁剪：【先修改比例等默认值】<br>画笔工具：【→缩小，】→放大（在英文非大写状态）<br>【分开调色】：建立组（必须勾选此组有效）<br>【剪影】：使用钢笔选中建立选区使用蒙板纯色填充之后→复制→在第一个图层添加图层样式“色彩叠加”→移动→→使用【渐变映射整体调整】  </li></ol>]]></content>
      
      
      <categories>
          
          <category> Ps教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy Test！</title>
      <link href="/2020/02/21/test/"/>
      <url>/2020/02/21/test/</url>
      
        <content type="html"><![CDATA[<p>我是测试内容!</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则四</title>
      <link href="/2019/10/11/Markdown4/"/>
      <url>/2019/10/11/Markdown4/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>表格</strong></p><p>制作表格使用[^|]来分隔不同的单元格，使用[^-]来分个表头和其他行</p><p>语法格式如下：</p><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table><hr><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a><strong>高级技巧</strong></h3><p><strong>支持的HTML元素</strong></p><p>不在Markdown涵盖范围之内的标签，都可以直接在文档中用HTML撰写</p><p>目前支持的元素有<kbd>  <b> <i>  <em> <sup>  &lt;br>等</sup></em></i></b></kbd></p><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑</p><p><strong>转义</strong></p><p>使用很多特殊的符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，markdown使用反斜杠转义特殊字符：</p><p>*<em>文本加粗*</em></p><p>\*\<em>正常显示星号\*\\</em></p><p><strong>公式</strong></p><p>当需要在编辑器中插入数学公式的时候，可以使用两个美元符号$$包裹TeX或者LateX格式的数学公式来实现。提交后，问答和文章页会根据需要加载Mathjax对数学公式进行渲染。如：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则三</title>
      <link href="/2019/10/11/Markdown3/"/>
      <url>/2019/10/11/Markdown3/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>链接</strong></p><p>链接的使用方式如下：</p><p>[链接名称](链接地址)</p><p>或者</p><p>&lt;链接地址&gt;</p><p>例如：</p><p>这是一个链接    <a href="https://www.baidu.com" target="_blank" rel="noopener">百度一下</a></p><p>或者直接使用链接地址</p><p><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p><p><strong><em>高级链接</em></strong></p><p>链接也可以使用变量来代替，文档末尾附带变量地址：</p><p><strong>注意</strong></p><p>此时的格式<strong>不再</strong>是[]()而是[][]</p><p>这个链接用1来作为网址变量[Google]<a href="http://www.google.com/" target="_blank" rel="noopener">1</a></p><p>这个链接使用run作为网址变量[baidu]<a href="http://www.baidu.com/" target="_blank" rel="noopener">run</a></p><p>然后在文档结尾处为变量赋值(网址)</p><p><strong>图片</strong></p><p>语法格式如下：</p><p> ![alt  属性文本](图片地址)</p><p> ![alt  属性文本](图片地址  “可选标题”)</p><ul><li>开头一个感叹号</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的‘title’属性的文字。</li></ul><p>使用实例：</p><p><img src="//www.baidu.com/img/bd_logo1.png" alt="Baidu 图标"></p><p><img src="//heaiwei.github.io/2019/10/11/Markdown3/ztfn.JPG" alt="斋藤飞鸟图标"></p><p>同理，也可以像使用链接网址一样对图片地址使用变量：</p><p>这个链接用1作为网址变量 <img src="//www.baidu.com/img/bd_logo1.png" alt="baidu">.</p><p>然后在文档的结尾位变量赋值(网址)</p><p>目前[^Markdow]还没有办法指定图片的高度与宽度，如果需要的话，可以使用普通的<strong><img></strong>标签。</p><img src="//www.baidu.com/img/bd_logo1.png" width="50%">]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则二</title>
      <link href="/2019/10/11/Markdown2/"/>
      <url>/2019/10/11/Markdown2/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>区块</strong></p><p>markdown区块引用是在段落的开头使用[^&gt;]符号,然后后面紧跟一个<strong>空格</strong>符号</p><blockquote><p>区块引用</p><p>菜鸟教程</p><p>学的是技术也是梦想！加油</p></blockquote><p>此外区块是可以嵌套的，一个[^&lt;]符号是最外层，两个[^&lt;]是第一层嵌套以此类推</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote><p><strong>区块中使用列表</strong></p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol></blockquote><blockquote><ul><li>第一项</li><li>第二项</li></ul></blockquote><p><strong>列表中使用区块</strong></p><p>在列表项目内放进区块，那么就需要在[^&gt;]前添加[^四个空格]的缩进</p><p>区块中使用列表的实例如下： </p><ul><li><p>第一项</p><blockquote><p>菜鸟教程</p><p>你好世界</p></blockquote></li><li><p>第二项</p><blockquote><p>第二项</p></blockquote></li></ul><p><strong>代码</strong></p><p>如果段落上的一个函数或者片段的代码可以用反引号把它包起来（[^`]）,例如：</p><p><code>printf()</code>函数</p><p><strong>代码区块</strong></p><p>代码区块使用<strong>4个空格</strong>或者一个<strong>制表符</strong>（Tab键)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helllo"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">emmmmm好像不起作用！！！(此处使用的是鼠标右键的插入代码块)<span class="string">`</span></span><br></pre></td></tr></table></figure><p>也可以使用[^<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    alert(&quot;HHH&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法规则一</title>
      <link href="/2019/10/11/Markdown1/"/>
      <url>/2019/10/11/Markdown1/</url>
      
        <content type="html"><![CDATA[<p>我展示的是一级标题 </p><p>==============</p><p>我展示的是二级标题</p><hr><p>#一级标题</p><p>##二级标题</p><p>###三级标题</p><p><em>斜体文本</em></p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><strong>粗体文本</strong></p><p><strong><em>粗斜体文本</em></strong></p><p><strong><em>粗斜体文本</em></strong></p><hr><hr><p><del>删除线</del></p><p><u>带下划线</u></p><p><strong>脚注</strong></p><p>[^要注明的文本]</p><p>创建脚注格式类似这样[^HAW]</p><p>你好[^我是何]</p><p><strong>有序列表和无序列表</strong></p><p>无序列表使用星号（*），加号（+）或者是减号（-）作为列表标记：</p><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><p>有序列表使用数字加上[^.]号来表示</p><ol><li>第一项</li><li>第二项</li></ol><p><strong>列表嵌套</strong>只需要在子列表中的选项添加[^四]个空格即可</p><ol><li>第一项<pre><code>- 第一项嵌套的第一个元素- 第一项嵌套的第二个元素</code></pre></li><li>第二项<pre><code>- 第二项的嵌套的第一个元素- 第二项的嵌套的第二个元素</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my second blog about hexo!</title>
      <link href="/2019/10/10/second-blog/"/>
      <url>/2019/10/10/second-blog/</url>
      
        <content type="html"><![CDATA[<p>nothing impotant</p><p>需要注意的命令：</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>hexo d</p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog about hexo!</title>
      <link href="/2019/10/10/first-blog/"/>
      <url>/2019/10/10/first-blog/</url>
      
        <content type="html"><![CDATA[<p>nothing impotant</p><p>需要注意的命令：</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><p>hexo d</p>]]></content>
      
      
      <categories>
          
          <category> 语法规则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
